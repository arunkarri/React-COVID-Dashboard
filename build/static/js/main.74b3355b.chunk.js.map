{"version":3,"sources":["env.js","dataCard.js","table.js","timeline.js","countryData.js","dashboard.js","App.js","index.js"],"names":["host","DataCard","props","className","type","theme","label","value","toLocaleString","Table","chartDeaths","chartRecovered","chartActive","useContext","LoaderContext","showLoader","loader","getCountryData","code","a","fetch","env","req","json","res","console","log","data","timeline","forEach","element","push","Date","date","getTime","deaths","setcDeaths","recovered","setcRec","active","setcActive","setPopulation","population","setCountryName","name","scope","cases","map","ele","index","href","onClick","e","preventDefault","Math","round","latest_data","calculated","death_rate","recovery_rate","confirmed","critical","today","Timeline","options","chart","id","xaxis","labels","datetimeFormatter","year","month","day","hour","formatter","toLocaleDateString","tickAmount","tooltip","x","format","series1","deathSeries","series2","activeSeries","recoveredSeries","series","width","height","CountryData","Dashboard","useState","setCases","cDeaths","cRec","cActive","countryName","totalConfirmed","setTotalConfirm","totalActive","setTotalActive","totalRecovered","setTotalRecovered","totalDead","setTotalDead","getCases","sorted","sort","b","reduce","acc","curr","dead","React","useEffect","role","createContext","loading","App","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.74b3355b.chunk.js","sourcesContent":["const host = 'https://corona-api.com/';\n\nexport default host;","const DataCard = (props) => (\n  <div className=\"col-6 p-1\">\n    <div className={`card text-center bg-${props.type} text-${props.theme}`}>\n      <div className=\"card-body\">\n        <h5>\n          <span className=\"card-title\">{props.label}</span>\n        </h5>\n        <p className=\"card-text\">{props.value.toLocaleString()}</p>\n      </div>\n    </div>\n  </div>\n);\n\nexport default DataCard;","import env from './env';\nimport { LoaderContext } from './App';\nimport { useContext } from 'react';\n\nconst Table = (props) => {\n  const chartDeaths = [];\n  const chartRecovered = [];\n  const chartActive = [];\n  const { loader, showLoader } = useContext(LoaderContext);\n\n  const getCountryData = async (code) => {\n    showLoader(true);\n    const req = await fetch(`${env}/countries/${code}`);\n    const res = await req.json();\n    console.log(res);\n    res.data?.timeline.forEach((element) => {\n      chartDeaths.push([new Date(element.date).getTime(), element.deaths]);\n    });\n    props.setcDeaths(chartDeaths);\n\n    res.data?.timeline.forEach((element) => {\n      chartRecovered.push([new Date(element.date).getTime(), element.recovered]);\n    });\n    props.setcRec(chartRecovered);\n    res.data?.timeline.forEach((element) => {\n      chartActive.push([new Date(element.date).getTime(), element.active]);\n    });\n    props.setcActive(chartActive);\n\n    props.setPopulation(res.data.population);\n    props.setCountryName(res.data.name);\n    showLoader(false);\n  };\n\n  return (\n    <div className=\"table-container\">\n      <table className=\"table table-responsive table-bordered\">\n        <thead className=\"text-dark\">\n          <tr>\n            <th scope=\"col\">Country</th>\n            <th scope=\"col\">Death Rate</th>\n            <th scope=\"col\">Recovery Rate</th>\n            <th scope=\"col\">Confirmed</th>\n            <th scope=\"col\">Critical</th>\n            <th scope=\"col\">Fatal</th>\n            <th scope=\"col\">Today's Cases</th>\n            <th scope=\"col\">Total Population</th>\n          </tr>\n        </thead>\n        <tbody className=\"text-dark\">\n          {props.cases.map((ele, index) => {\n            return (\n              <tr key={index}>\n                <td>\n                  <a\n                    href=\"\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      getCountryData(ele.code);\n                    }}\n                  >\n                    {ele.name}\n                  </a>\n                </td>\n                <td>{Math.round(ele.latest_data.calculated.death_rate)}%</td>\n                <td>{Math.round(ele.latest_data.calculated.recovery_rate)}%</td>\n                <td>{ele.latest_data.confirmed}</td>\n                <td>{ele.latest_data.critical}</td>\n                <td className=\"text-danger\">{ele.latest_data.deaths}</td>\n                <td>\n                  <span className=\"text-danger\">Deaths: </span>\n                  {ele.today.deaths}&nbsp;&nbsp;<span className=\"text-danger\">Confirmed: </span>\n                  {ele.today.confirmed}\n                </td>\n                <td>{ele.population}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Table;\n","import React from 'react';\nimport Chart from 'react-apexcharts';\n\nconst Timeline = (props) => {\n  const options = {\n    chart: {\n      id: 'Country Data',\n    },\n    xaxis: {\n      labels: {\n        datetimeFormatter: {\n          year: 'yyyy',\n          month: \"MMM 'yy\",\n          day: 'dd MMM',\n          hour: 'HH:mm',\n        },\n        formatter: function (value) {\n          return new Date(value).toLocaleDateString();\n        },\n      },\n      tickAmount: 5,\n    },\n    tooltip: {\n      x: {\n        format: 'dd MMM yyyy',\n      },\n    },\n  };\n\n  const series1 = [\n    {\n      name: 'Deaths',\n      data: props.deathSeries,\n    },\n  ];\n  const series2 = [\n    {\n      name: 'Active',\n      data: props.activeSeries,\n    },\n    {\n      name: 'Recovered',\n      data: props.recoveredSeries,\n    },\n  ];\n  return (\n    <>\n      <b className=\"text-danger\">Deaths</b>\n      <Chart options={options} series={series1} type=\"line\" width={350} height={250} />\n      <b className=\"text-primary\">Active & Recovered</b>\n      <Chart options={options} series={series2} type=\"line\" width={350} height={250} />\n    </>\n  );\n};\n\nexport default Timeline;\n","import Timeline from './timeline';\n\nconst CountryData = (props) => {\n  return (\n    <div className=\"col-12 p-1\">\n      <div className=\"card text-center\">\n        <div className=\"card-body\">\n          <h5>\n            <span className=\"card-title\">{props.name}</span>\n          </h5>\n          <hr />\n          <span className=\"card-text\">\n            <b>Population: </b>\n            <small>{props.population?.toLocaleString()}</small>\n          </span>\n          <br />\n          <br />\n          <hr />\n          <Timeline deathSeries={props.deaths} activeSeries={props.active} recoveredSeries={props.recovered} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CountryData;\n","import React, { useState, useContext } from 'react';\nimport env from './env';\nimport { LoaderContext } from './App';\nimport DataCard from './dataCard';\nimport Table from './table';\nimport CountryData from './countryData';\n\nconst Dashboard = () => {\n  const [cases, setCases] = useState([]);\n  const [cDeaths, setcDeaths] = useState([]);\n  const [cRec, setcRec] = useState([]);\n  const [cActive, setcActive] = useState([]);\n  const [population, setPopulation] = useState(0);\n  const [countryName, setCountryName] = useState('');\n  const [totalConfirmed, setTotalConfirm] = useState(0);\n  const [totalActive, setTotalActive] = useState(0);\n  const [totalRecovered, setTotalRecovered] = useState(0);\n  const [totalDead, setTotalDead] = useState(0);\n  const { loader, showLoader } = useContext(LoaderContext);\n  const chartDeaths = [];\n  const chartRecovered = [];\n  const chartActive = [];\n\n  const getCases = async () => {\n    const req = await fetch(`${env}countries`);\n    const res = await req.json();\n\n    const sorted = res.data.sort((a, b) => b.latest_data.confirmed - a.latest_data.confirmed);\n    setCases(sorted);\n    showLoader(false);\n    getCountryData(sorted[0].code);\n\n    const confirmed = res.data.reduce((acc, curr) => {\n      return acc + curr.latest_data.confirmed;\n    }, 0);\n\n    setTotalConfirm(confirmed);\n\n    const active = res.data.reduce((acc, curr) => {\n      return acc + (curr.latest_data.confirmed - curr.latest_data.recovered - curr.latest_data.deaths);\n    }, 0);\n\n    setTotalActive(active);\n\n    const recovered = res.data.reduce((acc, curr) => {\n      return acc + curr.latest_data.recovered;\n    }, 0);\n\n    setTotalRecovered(recovered);\n\n    const dead = res.data.reduce((acc, curr) => {\n      return acc + curr.latest_data.deaths;\n    }, 0);\n\n    setTotalDead(dead);\n  };\n\n  const getCountryData = async (code) => {\n    const req = await fetch(`${env}/countries/${code}`);\n    const res = await req.json();\n    res.data?.timeline.forEach((element) => {\n      chartDeaths.push([new Date(element.date).getTime(), element.deaths]);\n    });\n    setcDeaths(chartDeaths);\n\n    res.data?.timeline.forEach((element) => {\n      chartRecovered.push([new Date(element.date).getTime(), element.recovered]);\n    });\n    setcRec(chartRecovered);\n    res.data?.timeline.forEach((element) => {\n      chartActive.push([new Date(element.date).getTime(), element.active]);\n    });\n    setcActive(chartActive);\n\n    setPopulation(res.data.population);\n    setCountryName(res.data.name);\n  };\n\n  React.useEffect(() => {\n    getCases();\n  }, []);\n\n  return (\n    <>\n      <div className=\"container\">\n        {loader === true ? (\n          <div className=\"spinner-border text-success\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"row\">\n            <h5 className=\"text-danger text-center\">COVID 19 Dashboard</h5>\n            <div className=\"col-xl-4 col-lg-4 col-md-4 col-sm-6 col-xs-12\">\n              <div className=\"row\">\n                <DataCard label=\"Confirmed\" value={totalConfirmed} type=\"warning\" theme=\"dark\" />\n                <DataCard label=\"Active\" value={totalActive} type=\"primary\" theme=\"light\" />\n                <DataCard label=\"Recovered\" value={totalRecovered} type=\"success\" theme=\"light\" />\n                <DataCard label=\"Deceased\" value={totalDead} type=\"danger\" theme=\"light\" />\n                <CountryData deaths={cDeaths} population={population} name={countryName} active={cActive} recovered={cRec} />\n              </div>\n            </div>\n\n            <div className=\"col-xl-8 col-lg-8 col-md-8 col-sm-6 col-xs-12\">\n              <Table cases={cases} setcDeaths={setcDeaths} setPopulation={setPopulation} setCountryName={setCountryName} setcActive={setcActive} setcRec={setcRec} />\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Dashboard;\n","import React, { useState } from 'react';\nimport Dashboard from './dashboard';\n\nexport const LoaderContext = React.createContext({\n  loading: true,\n  showLoader: () => {},\n});\n\nconst App = () => {\n  const [loader, showLoader] = useState(true);\n  const value = { loader, showLoader };\n  return (\n    <>\n      <LoaderContext.Provider value={value}>\n        <Dashboard />\n      </LoaderContext.Provider>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}